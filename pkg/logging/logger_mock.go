// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

// Package logging is a generated GoMock package.
package logging

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Log mocks base method.
func (m *MockLogger) Log(level, message string, fields map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", level, message, fields)
}

// Log indicates an expected call of Log.
func (mr *MockLoggerMockRecorder) Log(level, message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogger)(nil).Log), level, message, fields)
}

// LogAudit mocks base method.
func (m *MockLogger) LogAudit(message string, fields map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogAudit", message, fields)
}

// LogAudit indicates an expected call of LogAudit.
func (mr *MockLoggerMockRecorder) LogAudit(message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogAudit", reflect.TypeOf((*MockLogger)(nil).LogAudit), message, fields)
}

// LogDebug mocks base method.
func (m *MockLogger) LogDebug(message string, fields map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogDebug", message, fields)
}

// LogDebug indicates an expected call of LogDebug.
func (mr *MockLoggerMockRecorder) LogDebug(message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogDebug", reflect.TypeOf((*MockLogger)(nil).LogDebug), message, fields)
}

// LogError mocks base method.
func (m *MockLogger) LogError(message string, fields map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", message, fields)
}

// LogError indicates an expected call of LogError.
func (mr *MockLoggerMockRecorder) LogError(message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockLogger)(nil).LogError), message, fields)
}

// LogFatal mocks base method.
func (m *MockLogger) LogFatal(message string, fields map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogFatal", message, fields)
}

// LogFatal indicates an expected call of LogFatal.
func (mr *MockLoggerMockRecorder) LogFatal(message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFatal", reflect.TypeOf((*MockLogger)(nil).LogFatal), message, fields)
}

// LogInfo mocks base method.
func (m *MockLogger) LogInfo(message string, fields map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogInfo", message, fields)
}

// LogInfo indicates an expected call of LogInfo.
func (mr *MockLoggerMockRecorder) LogInfo(message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInfo", reflect.TypeOf((*MockLogger)(nil).LogInfo), message, fields)
}

// LogPanic mocks base method.
func (m *MockLogger) LogPanic(message string, fields map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogPanic", message, fields)
}

// LogPanic indicates an expected call of LogPanic.
func (mr *MockLoggerMockRecorder) LogPanic(message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogPanic", reflect.TypeOf((*MockLogger)(nil).LogPanic), message, fields)
}

// LogSecurity mocks base method.
func (m *MockLogger) LogSecurity(message string, fields map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogSecurity", message, fields)
}

// LogSecurity indicates an expected call of LogSecurity.
func (mr *MockLoggerMockRecorder) LogSecurity(message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogSecurity", reflect.TypeOf((*MockLogger)(nil).LogSecurity), message, fields)
}

// LogTrace mocks base method.
func (m *MockLogger) LogTrace(message string, fields map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogTrace", message, fields)
}

// LogTrace indicates an expected call of LogTrace.
func (mr *MockLoggerMockRecorder) LogTrace(message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogTrace", reflect.TypeOf((*MockLogger)(nil).LogTrace), message, fields)
}

// LogWarning mocks base method.
func (m *MockLogger) LogWarning(message string, fields map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogWarning", message, fields)
}

// LogWarning indicates an expected call of LogWarning.
func (mr *MockLoggerMockRecorder) LogWarning(message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogWarning", reflect.TypeOf((*MockLogger)(nil).LogWarning), message, fields)
}
