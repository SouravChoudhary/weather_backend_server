// Code generated by MockGen. DO NOT EDIT.
// Source: open_weather_map_client.go

// Package external is a generated GoMock package.
package external

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOpenWeatherMapClient is a mock of OpenWeatherMapClient interface.
type MockOpenWeatherMapClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenWeatherMapClientMockRecorder
}

// MockOpenWeatherMapClientMockRecorder is the mock recorder for MockOpenWeatherMapClient.
type MockOpenWeatherMapClientMockRecorder struct {
	mock *MockOpenWeatherMapClient
}

// NewMockOpenWeatherMapClient creates a new mock instance.
func NewMockOpenWeatherMapClient(ctrl *gomock.Controller) *MockOpenWeatherMapClient {
	mock := &MockOpenWeatherMapClient{ctrl: ctrl}
	mock.recorder = &MockOpenWeatherMapClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenWeatherMapClient) EXPECT() *MockOpenWeatherMapClientMockRecorder {
	return m.recorder
}

// GetWeatherData mocks base method.
func (m *MockOpenWeatherMapClient) GetWeatherData(cityName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeatherData", cityName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeatherData indicates an expected call of GetWeatherData.
func (mr *MockOpenWeatherMapClientMockRecorder) GetWeatherData(cityName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeatherData", reflect.TypeOf((*MockOpenWeatherMapClient)(nil).GetWeatherData), cityName)
}
